<?xml version="1.0" encoding="UTF-8"?>
<project name="RSG2_Package" default="build">
	<description>
		--- RSGallery2 package build script with phing ---
	
		The script creates the component, modules and
		plugin zipfiles.  It replaces or changes
		text in files. It creates the package manifest
		file. All results will be collected zipped

		All paths start at the build folder. Changes
		are done in the copied files. Use command
		"phing -f updateProject.xml" before to
		standardize all files of the project

		Changes in files
		* Version and date for copyright in *.php files
		* Build ID (file) will be increased and used in version string
		*
		* (Set lines with @since to actual date in *.php)
		*
		* .
		* .

		command line
		phing -logfile .\build.package.log  -f .\build.package.xml
	</description>

	<!-- 
	.........................................................................
	ToDo:
	.........................................................................
	* Patch: Set lines with @since to actual date in *.php
		<author>[AUTHOR]</author>
		<authorEmail>[AUTHOR_EMAIL]</authorEmail>
		<authorUrl>[AUTHOR_URL]</authorUrl>
	* ? force new build number ?
	* .
	* .
	* .
	* .
	-->

	<!--
	=========================================================================
	   include libraries
	=========================================================================
	-->

	<import file="build.libMath.xml" />
	<import file="build.libBuildNumber.xml" />

	<import file="build.libGeneral.xml" />
	<import file="build.libPkgManifest.xml" />

	<!--
    =========================================================================
       Parameter
    =========================================================================
    -->

	<!-- 
	.........................................................................
	Version number of build
	.........................................................................	
	-->
	
    <!-- Version number of build -->
    <property name="build.version" value="5.0.0.5" override="true" />
	<!-- additional naming postfix -->
    <!--property name="build.postfix" value="prepare." override="true" /-->
    <property name="build.postfix" value="" override="true" />

	<!-- 
	.........................................................................
	
	.........................................................................	
	-->
	
    <property name="type" value="Package" />
    <property name="package_name" value="pkg_rsgallery2" />
	<property name="extension" value="rsgallery2" />

	<!--
	.........................................................................
	external parameter
	.........................................................................
	-->
	<!-- Not add date in zip name -->
	<property name="isNoDateInZipName" value="0" override="true" />
	<!-- Do update maifest file (date/ version -->
	<property name="isUpdateManifest" value="0" override="true" />

	<!--
	.........................................................................
    debug parameter
	.........................................................................
	-->

	<property name="isLeaveOut_CreateSourceZips" value="1" override="true" />

	<!--
	.........................................................................
	date stamps
	.........................................................................
	-->
	
    <!-- Get the standard date for build -->
    <!-- tstamp prefix="build.date" /-->

	<tstamp>
		<format property="dateYearMonthDay" pattern="%Y%m%d" />
	</tstamp>
	
	<tstamp>
		<format property="date.year.month.day" pattern="%Y.%m.%d" />
	</tstamp>
	
	<tstamp>
		<format property="date.day.month.year" pattern="%d. %b. %Y" />
	</tstamp>
	
	<tstamp>
		<format property="date.year" pattern="%Y" />
	</tstamp>
	
	
	<!-- 
	.........................................................................
	folders
	.........................................................................
	-->
	
	<!-- Declare Project src files -->
	<property name="srcRoot" value="./../../RSGallery2_J4/" override="true" />

    <!-- Set the source and destination directory for copy (sources relative to the build dir) -->
    <property name="buildDir" value="./../.packages/" override="true" />


	<property name="srcPackageCmp" value="${srcRoot}administrator/manifests/packages" override="true" />

	<property name="dstPackageCmp" value="${buildDir}pkg/" />
	<property name="buildDirTemp" value="${dstPackageCmp}tmp/" override="true" />

    <property name="adminComponent" value="administrator/components/com_${extension}/" override="true" />
    <property name="siteComponent" value="/components/com_${extension}/" override="true" />
    <property name="media" value="/media/com_${extension}/" override="true" />

<!--    <property name="modulesComponent" value="/modules/com_${extension}/" override="true" />-->
    <property name="modulesComponent" value="/modules/" override="true" />
<!--	<property name="pluginsComponent" value="/plugins/com_${extension}/" override="true" />-->
	<property name="pluginsComponent" value="/plugins/" override="true" />

    <property name="srcAdminCmp" value="${srcRoot}${adminComponent}/" />
    <property name="srcSiteCmp" value="${srcRoot}${siteComponent}/" />
    <property name="srcMediaCmp" value="${srcRoot}${media}/" />
    <property name="srcModulesCmp" value="${srcRoot}${modulesComponent}/" />
    <property name="srcPluginsCmp" value="${srcRoot}${pluginsComponent}/" />

<!--    <property name="dstAdminCmp" value="${buildDirTemp}${adminComponent}/" />-->
<!--    <property name="dstSiteCmp" value="${buildDirTemp}${siteComponent}/" />-->
<!--    <property name="dstMediaCmp" value="${buildDirTemp}${media}/" />-->
<!--    <property name="dstPackageCmp" value="${buildDirTemp}${modulesComponent}/" />-->
<!--    <property name="dstPluginsCmp" value="${buildDirTemp}${pluginsComponent}/" />-->

	<property name="srcBuildNumberFile" value="${srcPackageCmp}/buildNumber.txt" override="true" />


	<property name="buildPackageDir" value="${buildDir}pkg/" override="true" />
	
	<property name="dstManifestFileName" value="pkg_${extension}.xml" override="true" />
	<property name="dstManifestFile" value="${dstPackageCmp}/${dstManifestFileName}" override="true" />
	<property name="srcManifestFile" value="${srcPackageCmp}/${dstManifestFileName}" override="true" />


	<!--
	.........................................................................
	source folder sets
	.........................................................................
	-->

	<!-- File set module (name)  folder -->
	<!-- ToDo: no other data in folder then use only first line like in other build xmls -->
	<fileset  dir="${srcPackageCmp}" id="srcFolderSet">
<!--		<include name="**" />-->
		<include name="${extension}/**" />
		<include name="pkg_rsgallery2.xml" />

	</fileset >


	<!--
    =========================================================================
       Targets
    =========================================================================
    -->


	<target name="build" >
	
		<!--
???
		* prepareSrcFolder
		* buildComponent
		* buildModules
		* buildPlugins
		* zipFiles
		* deleteTemp
		* .
		-->
		<echo msg="build packages start" />

		<echo msg="   package_name='${package_name}'" />

		<phingcall target="prepareSrcFolder">
		</phingcall>

		<if>
			<!-- on update maifest file -->
			<equals arg1="${isUpdateManifest}" arg2="1" />
			<then>
				<phingcall target="ManifestBuildNumber">
				</phingcall>

				<phingcall target="manifestFile">
				</phingcall>

			</then>
		</if>
		
		<phingcall target="copy2Pkg">
		</phingcall>

		<if>
			<!-- leave out for debug fast purpose -> arg2 == 0 -->
			<equals arg1="${isLeaveOut_CreateSourceZips}" arg2="1" />
			<then>

			<phingcall target="buildComponent">
			</phingcall>

			<phingcall target="buildModules">
			</phingcall>

			<phingcall target="buildPlugins">
			</phingcall>

			<!-- Remove temp so it is not included in zip   -->
			<echo msg="   delete path '${buildDirTemp}'" />
			<delete dir="${buildDirTemp}" />

			</then>
		</if>


		<phingcall target="manifestAddZipNames">
		</phingcall>

		<phingcall target="zipFiles">
			<property name="main_name" value="${package_name}" override="true" />
			<property name="dstPath" value="${dstPackageCmp}" override="true" />
		</phingcall>


		<!-- clean / tidy build artefacts -->
		<phing phingfile="build.clean_up.xml">
			<!-- sub task called by package -->
			<property name="buildDirTemp" value="${buildPackageDir}" />
		</phing>


		<echo msg="build packages done" />

	</target>

	<!--
    =========================================================================
       SUB - Targets
    =========================================================================
    -->

	<!--
	.........................................................................
	prepareSrcFolder
	.........................................................................
	-->

	<target name="prepareSrcFolder">

		<echo msg="pck:prepareSrcFolder start" />

		<!-- On source path not existing -->
        <mkdir dir="${srcAdminCmp}" />
        <mkdir dir="${srcSiteCmp}" />
        <mkdir dir="${srcMediaCmp}" />
		
        <mkdir dir="${srcModulesCmp}" />
        <mkdir dir="${srcPluginsCmp}" />

        <echo msg="pck:prepareSrcFolder end" />
    </target>


	<!--
	.........................................................................
	copy2Pkg
	.........................................................................
	-->

	<target name="copy2Pkg">
		<echo msg="      copy2Pkg start" />

		<!--Copy admin files to tmp folder -->
		<copy todir="${dstPackageCmp}" overwrite="true">
			<fileset refid="srcFolderSet" />
		</copy>

		<echo msg="      copy2Pkg end" />
	</target>

	<!--
	.........................................................................
	buildComponent
	.........................................................................
	ToDo: Exchange things like date, copyrght and others (?
	-->

	<target name="buildComponent">
		<echo msg="pck:buildComponent call" />

<!--		<echo msg="   buildPackageDir: ${buildPackageDir}" />-->

		<!-- call external file "" -->
		<!--		<phing phingfile="build.comp.xml" target="sometarget">-->
		<phing phingfile="build.comp.xml">
			<!-- sub task called by package -->
			<property name="isCalledByPackage" value="1" />
			<property name="buildDir" value="${buildPackageDir}"/>
			<property name="buildPackageDir" value="${buildPackageDir}"/>
			<property name="isNoDateInZipName" value="1" />
		</phing>

		<echo msg="pck:buildComponent call end" />
	</target>

	<!--
	.........................................................................
	buildModules
	.........................................................................
	-->

	<target name="buildModules">
		<echo msg="pck:buildModules call " />

		<echo msg="   buildPackageDir: ${buildPackageDir}" />

		<!-- call external file "" -->
		<!-- <phing phingfile="build.comp.xml" target="sometarget"> -->
		<phing phingfile="build.modules.xml">
			<!-- sub task called by package -->
			<property name="isCalledByPackage" value="1" />
			<property name="buildDir" value="${buildPackageDir}"/>
			<property name="buildPackageDir" value="${buildPackageDir}"/>
			<property name="isNoDateInZipName" value="1" />
		</phing>

		<echo msg="pck:buildModules call end" />
	</target>
	
	<!--
	.........................................................................
	buildPlugins
	.........................................................................
	-->

	<target name="buildPlugins">
		<echo msg="pck:buildPlugins call" />

		<!-- call external file "" -->
<!--		<phing phingfile="build.comp.xml" target="sometarget">-->
		<phing phingfile="build.plugins.xml">
			<!-- sub task called by package -->
			<property name="isCalledByPackage" value="1" />
			<property name="buildDir" value="${buildPackageDir}"/>
			<property name="buildPackageDir" value="${buildPackageDir}"/>
			<property name="isNoDateInZipName" value="1" />
		</phing>

		<echo msg="pck:buildPlugins call end" />
	</target>


	<!--
	.........................................................................
	buildPlugins
	.........................................................................
	-->

	<target name="manifestAddZipNames">
		<echo msg="pck:manifestAddZipNames call" />

		<echo msg="   manifest file='${dstManifestFile}'" />

		<!-- list of zipped  -->
		<property name="zippedFiles" value="????" override="true" />
		<collectZippedFileNames path="${dstPackageCmp}" zippedFileNames="zippedFiles" />
		<echo msg="   +++ fileList='${zippedFiles}'" />

		<!-- replace text  -->
		<property name="text4manifest" value="????" override="true" />
		<filesZippedLines4Manifest  zippedFileNames="${zippedFiles}" text4ManifestFile="text4manifest" />
		<echo msg="   +++ text4manifest='${text4manifest}'" />


		<!-- remove old zip file lines   -->
		<!-- line seperator ? global: ${line.separator}  -->

		<reflexive file="${dstManifestFile}">
			<filterchain>
				<replaceregexp>
					<regexp pattern="(?&lt;file&gt;.*file&gt;${line.separator})" replace=""/>
				</replaceregexp>
			</filterchain>
		</reflexive>

		<!-- How to append text to a specific place in a file using Phing
			https://stackoverflow.com/questions/17936380/how-to-append-text-to-a-specific-place-in-a-file-using-phing
		-->
		<!-- line seperator ? global ?  -->

		<!-- <property name="matchLine" value="&lt;files&gt;${line.separator}" override="true" /> -->
		<property name="matchLine" value="&lt;files&gt;" override="true" />
		<reflexive file="${dstManifestFile}">
			<filterchain>
				<replaceregexp>
					<regexp pattern="${matchLine}" replace="${matchLine}${text4manifest}" />
				</replaceregexp>
			</filterchain>
		</reflexive>

		<echo msg="pck:buildPlugins call end" />
	</target>

</project>
