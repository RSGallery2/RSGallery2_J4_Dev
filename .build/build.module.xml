<?xml version="1.0" encoding="UTF-8"?>
<project name="RSG2_Module" default="buildModule">
	<description>
		--- RSGallery2 single module build script with phing ---

		The script copies a RSG2 module from path
		RSGallery2_J4\modules and creates a build in
		folder ..\.packages\tmp. It replaces or changes
		text in files. Then these files are zipped

		All paths start at the build folder. Changes
		are done in the copied files. Use command
		"phing -f updateProject.xml" before to
		standardize all files of the project

		Changes in files
		* Version and date for copyright in *.php files
		* Build ID (file) will be increased and used in version string
		*
		* (Set lines with @since to actual date in *.php)
		*
		* .
		* .

		command line
		phing -logfile .\build.module.log  -f .\build.module.xml -Dmodule_name=%ModuleName%
	</description>

	<!-- 
	.........................................................................
	ToDo:
	.........................................................................
	* Patch: Set lines with @since to actual date in *.php
		<author>[AUTHOR]</author>
		<authorEmail>[AUTHOR_EMAIL]</authorEmail>
		<authorUrl>[AUTHOR_URL]</authorUrl>
	*
	* .
	* .
	* .
	* .
	-->

	<!--
	=========================================================================
	   include libraries
	=========================================================================
	-->

	<import file="build.libMath.xml"/>
	<import file="build.libBuildNumber.xml"/>

	<import file="build.libGeneral.xml" />

	<!--
	=========================================================================
	   Parameter
	=========================================================================
	-->

	<!--
	.........................................................................
	Version number of build
	.........................................................................
	-->

	<!-- Version number of build -->
	<property name="build.version" value="5.0.0.4" override="true" />
	<!--property name="build.postfix" value="prepare." override="true" /-->
	<property name="build.postfix" value="" override="true" />

	<!--
	.........................................................................

	.........................................................................
	-->

	<property name="type" value="Module" />
	<property name="module_name" value="mod_xxx" />
	<property name="extension" value="RSGallery2" />

	<!--
	.........................................................................
	external parameter
	.........................................................................
	-->
	<!-- Not delete of item, no exit message -->
	<property name="isCalledByPackage" value="0" override="true" />
	<property name="buildPackageDir" value="??? PackageDir" override="true" />
	<!-- Not add date in zip name -->
	<property name="isNoDateInZipName" value="0" override="true" />

	<!--
	.........................................................................
	date stamps
	.........................................................................
	-->

	<!-- Get the standard date for build -->
	<!-- tstamp prefix="build.date" /-->

	<tstamp>
		<format property="dateYearMonthDay" pattern="%Y%m%d" />
	</tstamp>

	<tstamp>
		<format property="date.year.month.day" pattern="%Y.%m.%d" />
	</tstamp>

	<tstamp>
		<format property="date.day.month.year" pattern="%d. %b. %Y" />
	</tstamp>

	<tstamp>
		<format property="date.year" pattern="%Y" />
	</tstamp>


	<!--
	.........................................................................
	folders
	.........................................................................
	-->

	<!-- Declare Project src files -->
	<property name="srcRoot" value="./../../RSGallery2_J4/" override="true" />

	<!-- Set the source and destination directory for copy (sources relative to the build dir) -->
	<property name="buildDir" value="./../.packages/" />
	<property name="buildDirTemp" value="${buildDir}tmp/" override="true" />

	<property name="modulesComponent" value="modules/${module_name}" override="true" />
	<property name="srcModulesCmp" value="${srcRoot}${modulesComponent}" override="true" />
	<property name="dstModulesCmp" value="${buildDirTemp}${modulesComponent}" override="true" />

	<property name="srcBuildNumberFile" value="${srcModulesCmp}/buildNumber.txt" override="true" />

	<property name="dstManifestFileName" value="${module_name}.xml" override="true" />
	<property name="dstManifestFile" value="${dstModulesCmp}/${dstManifestFileName}" override="true" />

	<!--
	.........................................................................
	build number (from file later)
	.........................................................................
	-->

	<property name="buildNumber" value="not defined yet" />


	<!--
	.........................................................................
	source folder sets
	.........................................................................
	-->

	<!-- File set module (name)  folder -->
	<fileset  dir="${srcModulesCmp}" id="srcFolderSet">
		<include name="**" />
	</fileset >

	<!--
    =========================================================================
       Targets
    =========================================================================
    -->

	<target name="buildModule" >
		<!--
		* incrementBuildNumber
		* copy2Temp
		* versionWithBuildNumber
		* doPatchModule
		* manifestFile
		* zipFiles
		* .
		-->

		<echo msg="mod:buildModule start" />

		<echo msg="   module_name='${module_name}'" />
		<echo msg="   modulesComponent='${modulesComponent}'" />
		<echo msg="   srcModulesCmp='${srcModulesCmp}'" />
		<echo msg="   dstModulesCmp='${dstModulesCmp}'" />

		<echo msg="   isCalledByPackage='${isCalledByPackage}'" />

		<if>
			<!-- on package no timestamp -->
			<equals arg1="${isCalledByPackage}" arg2="0" />
			<then>
				<echo msg="    direct call" />
			</then>
			<else>
				<echo msg="    modules call" />
			</else>
		</if>

		<phingcall target="incrementBuildNumber">
		</phingcall>

		<phingcall target="copy2Temp">
		</phingcall>

		<phingcall target="versionWithBuildNumber">
		</phingcall>

		<phingcall target="doPatchModule">
		</phingcall>

		<!-- Retrieve changed version number ................................. -->

		<loadfile property="newVersion" file="${dstManifestFile}" >
			<filterchain>
				<!-- find line-->
				<linecontainsregexp>
					<regexp pattern="&lt;version&gt;(.*)&lt;" />
				</linecontainsregexp>
				<!-- extract version-->
				<replaceregexp>
					<regexp pattern="(.*&lt;version&gt;)(.*)(&lt;&#47;version&gt;)" replace="\2" />
				</replaceregexp>
				<striplinebreaks />
			</filterchain>
		</loadfile>
		<echo msg="newVersion: ${newVersion}" />
		<!-- ................................................................	-->

		<phingcall target="manifestFile">
		</phingcall>

		<phingcall target="zipFiles">
		</phingcall>

<!--		<echo msg="   ??? isCalledByPackage='${isCalledByPackage}' ???" />-->

		<!-- Not called external, do clean up  -->
		<if>
			<equals arg1="${isCalledByPackage}" arg2="0" />
			<then>

				<!-- clean / tidy build artefacts -->
				<phing phingfile="build.clean_up.xml">
					<!-- sub task called by package -->
					<property name="buildDirTemp" value="${buildDirTemp}" />
				</phing>

			</then>
		</if>

		<echo msg="mod:buildModule done" />
	</target>

	<!--
    =========================================================================
       SUB - Targets
    =========================================================================
    -->

	<!--
	.........................................................................
	incrementBuildNumber
	.........................................................................
	-->

	<target name="incrementBuildNumber">
		<echo msg="      incrementBuildNumber start" />

		<phingcall target="lib_incrementBuildNumber">
			<property name="buildNumberFile" value="${srcBuildNumberFile}" />
		</phingcall>

		<loadfile property="newBuildNbr" file="${srcBuildNumberFile}">
			<filterchain>
				<striplinebreaks />
			</filterchain>
		</loadfile>
		<echo msg="newBuildNbr: ${newBuildNbr}" />

		<property name="buildNumber" value="${newBuildNbr}"  override="true" />

		<echo msg="outer buildNumber: ${buildNumber}" />

		<echo msg="      incrementBuildNumber end" />
	</target>

	<!--
	.........................................................................
	versionWithBuildNumber
	.........................................................................
	-->

	<target name="versionWithBuildNumber">
		<echo msg="      versionWithBuildNumber start" />

		<!-- Retrieve actual build number ................................. -->

		<loadfile property="newBuildNbr" file="${srcBuildNumberFile}">
			<filterchain>
				<striplinebreaks />
			</filterchain>
		</loadfile>
		<echo msg="newBuildNbr: ${newBuildNbr}" />

		<!-- Retrieve previous version number ................................. -->

		<loadfile property="versionFound" file="${dstManifestFile}" >
			<filterchain>
				<!-- find line -->
				<linecontainsregexp>
					<regexp pattern="&lt;version&gt;(.*)&lt;" />
				</linecontainsregexp>
				<stripwhitespace />
				<!-- extract version -->
				<replaceregexp>
					<regexp pattern="(.*&lt;version&gt;)(.*)(&lt;&#47;version&gt;)" replace="\2" />
				</replaceregexp>
				<striplinebreaks />
			</filterchain>
		</loadfile>
		<echo msg="   versionFound: '${versionFound}'" />

		<!-- replace __BUMP_VERSION__ if found ................................. -->

		<if>
			<!-- on package no timestamp -->
			<equals arg1="${versionFound}" arg2="__BUMP_VERSION__" />
			<then>
				<property name="versionFound" value="${build.version}"  override="true" />
				<echo msg="   versionFound replaced: ${versionFound}" />
			</then>
		</if>

		<!-- add build number to version  ................................. -->

		<lib_versionWithBuildNumber result="versionWithBuild" version="${versionFound}" buildNumber="${newBuildNbr}" />
		<echo msg="versionWithBuild: ${versionWithBuild}" />

		<!--  write changed version back  ................................. -->

		<reflexive>
			<fileset dir="${dstModulesCmp}">
				<include pattern="${dstManifestFileName}" />
			</fileset>
			<filterchain>
				<replaceregexp>
					<regexp pattern="(?&lt;=&lt;version&gt;).*(?=&lt;)" replace="${versionWithBuild}"/>
				</replaceregexp>
			</filterchain>
		</reflexive>

		<echo msg="      versionWithBuildNumber end" />
	</target>

	<!--
	.........................................................................
	copy2Temp
	.........................................................................
	-->

	<target name="copy2Temp">
		<echo msg="      copy2Temp start" />

		<!--Copy admin files to tmp folder -->
		<copy todir="${dstModulesCmp}" overwrite="true">
			<fileset refid="srcFolderSet" />
		</copy>

		<echo msg="      copy2Temp end" />
	</target>

	<!--
	.........................................................................
	doPatchModule
	.........................................................................
	ToDo: Exchange things like date, copyrght and others (?
	-->

	<target name="doPatchModule" >
		<echo msg="mod:doBuildModule start" />

		<echo msg="   srcModulesCmp='${srcModulesCmp}'" />

		<!--		-->
		<!--		reflective .... -->
		<!--		<loadfile property="version" file="${dstManifestFile}" />-->
		<!--		<echo message="manifest version = ${version}" />-->


		<echo msg="mod:doBuildModule done" />
	</target>

	<!--
	.........................................................................
	zipFiles
	.........................................................................
	-->

	<target name="zipFiles">
		<echo msg="zipFiles start" />

		<echo msg="   dstModulesCmp='${dstModulesCmp}'" />

		<if>
			<!-- on package no timestamp -->
			<equals arg1="${isNoDateInZipName}" arg2="1" />
			<then>
				<echo message="zip: No timestamp" />
				<!-- called by package -->
				<if>
					<equals arg1="${isCalledByPackage}" arg2="0" />
					<then>
						<echo msg="    direct call" />
						<property name="destfile" value="${buildDir}/${module_name}.zip" override="true" />
					</then>
					<else>
						<property name="destfile" value="${buildPackageDir}/${module_name}.zip" override="true" />
					</else>
				</if>
			</then>
			<else>
				<echo message="zip: No timestamp" />
				<property name="destfile" value="${buildDir}/${module_name}.${build.postfix}${build.version}_${dateYearMonthDay}.zip" override="true" />
			</else>
		</if>

		<echo msg="destfile='${destfile}'" />

		<zip destfile="${destfile}">
			<fileset dir="${dstModulesCmp}">
				<include name="**" />
			</fileset>
		</zip>

		<echo msg="zipFiles end" />
	</target>


</project>
